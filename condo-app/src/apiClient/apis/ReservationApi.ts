/* tslint:disable */
/* eslint-disable */
/**
 * CondoPlanner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateOrEditReservationDto,
  ReservationDtoResponseDto,
} from '../models/index';
import {
    CreateOrEditReservationDtoFromJSON,
    CreateOrEditReservationDtoToJSON,
    ReservationDtoResponseDtoFromJSON,
    ReservationDtoResponseDtoToJSON,
} from '../models/index';

export interface ApiReservationIdDeleteRequest {
    id: number;
}

export interface ApiReservationIdGetRequest {
    id: number;
}

export interface ApiReservationPostRequest {
    createOrEditReservationDto?: CreateOrEditReservationDto;
}

/**
 * 
 */
export class ReservationApi extends runtime.BaseAPI {

    /**
     */
    async apiReservationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reservation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReservationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiReservationGetRaw(initOverrides);
    }

    /**
     */
    async apiReservationIdDeleteRaw(requestParameters: ApiReservationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiReservationIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reservation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReservationIdDelete(requestParameters: ApiReservationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiReservationIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiReservationIdGetRaw(requestParameters: ApiReservationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiReservationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reservation/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiReservationIdGet(requestParameters: ApiReservationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiReservationIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiReservationPostRaw(requestParameters: ApiReservationPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationDtoResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Reservation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrEditReservationDtoToJSON(requestParameters['createOrEditReservationDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationDtoResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiReservationPost(requestParameters: ApiReservationPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationDtoResponseDto> {
        const response = await this.apiReservationPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
