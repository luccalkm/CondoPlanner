/* tslint:disable */
/* eslint-disable */
/**
 * CondoPlanner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CommonArea } from './CommonArea';
import {
    CommonAreaFromJSON,
    CommonAreaFromJSONTyped,
    CommonAreaToJSON,
} from './CommonArea';
import type { CondominiumResident } from './CondominiumResident';
import {
    CondominiumResidentFromJSON,
    CondominiumResidentFromJSONTyped,
    CondominiumResidentToJSON,
} from './CondominiumResident';

/**
 * 
 * @export
 * @interface Condominium
 */
export interface Condominium {
    /**
     * 
     * @type {number}
     * @memberof Condominium
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Condominium
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Condominium
     */
    address?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Condominium
     */
    numberOfResidences?: number;
    /**
     * 
     * @type {Array<CommonArea>}
     * @memberof Condominium
     */
    commonAreas?: Array<CommonArea> | null;
    /**
     * 
     * @type {Array<CondominiumResident>}
     * @memberof Condominium
     */
    residents?: Array<CondominiumResident> | null;
    /**
     * 
     * @type {string}
     * @memberof Condominium
     */
    administratorId?: string | null;
}

/**
 * Check if a given object implements the Condominium interface.
 */
export function instanceOfCondominium(value: object): value is Condominium {
    return true;
}

export function CondominiumFromJSON(json: any): Condominium {
    return CondominiumFromJSONTyped(json, false);
}

export function CondominiumFromJSONTyped(json: any, ignoreDiscriminator: boolean): Condominium {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'address': json['address'] == null ? undefined : json['address'],
        'numberOfResidences': json['numberOfResidences'] == null ? undefined : json['numberOfResidences'],
        'commonAreas': json['commonAreas'] == null ? undefined : ((json['commonAreas'] as Array<any>).map(CommonAreaFromJSON)),
        'residents': json['residents'] == null ? undefined : ((json['residents'] as Array<any>).map(CondominiumResidentFromJSON)),
        'administratorId': json['administratorId'] == null ? undefined : json['administratorId'],
    };
}

export function CondominiumToJSON(value?: Condominium | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'address': value['address'],
        'numberOfResidences': value['numberOfResidences'],
        'commonAreas': value['commonAreas'] == null ? undefined : ((value['commonAreas'] as Array<any>).map(CommonAreaToJSON)),
        'residents': value['residents'] == null ? undefined : ((value['residents'] as Array<any>).map(CondominiumResidentToJSON)),
        'administratorId': value['administratorId'],
    };
}

