/* tslint:disable */
/* eslint-disable */
/**
 * CondoPlanner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserDto } from './UserDto';
import {
    UserDtoFromJSON,
    UserDtoFromJSONTyped,
    UserDtoToJSON,
} from './UserDto';
import type { CommonAreaDto } from './CommonAreaDto';
import {
    CommonAreaDtoFromJSON,
    CommonAreaDtoFromJSONTyped,
    CommonAreaDtoToJSON,
} from './CommonAreaDto';

/**
 * 
 * @export
 * @interface CondominiumDto
 */
export interface CondominiumDto {
    /**
     * 
     * @type {number}
     * @memberof CondominiumDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CondominiumDto
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CondominiumDto
     */
    address?: string | null;
    /**
     * 
     * @type {Array<CommonAreaDto>}
     * @memberof CondominiumDto
     */
    readonly commonAreas?: Array<CommonAreaDto> | null;
    /**
     * 
     * @type {UserDto}
     * @memberof CondominiumDto
     */
    administrator?: UserDto;
    /**
     * 
     * @type {Array<UserDto>}
     * @memberof CondominiumDto
     */
    residents?: Array<UserDto> | null;
}

/**
 * Check if a given object implements the CondominiumDto interface.
 */
export function instanceOfCondominiumDto(value: object): value is CondominiumDto {
    return true;
}

export function CondominiumDtoFromJSON(json: any): CondominiumDto {
    return CondominiumDtoFromJSONTyped(json, false);
}

export function CondominiumDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CondominiumDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'address': json['address'] == null ? undefined : json['address'],
        'commonAreas': json['commonAreas'] == null ? undefined : ((json['commonAreas'] as Array<any>).map(CommonAreaDtoFromJSON)),
        'administrator': json['administrator'] == null ? undefined : UserDtoFromJSON(json['administrator']),
        'residents': json['residents'] == null ? undefined : ((json['residents'] as Array<any>).map(UserDtoFromJSON)),
    };
}

export function CondominiumDtoToJSON(value?: Omit<CondominiumDto, 'commonAreas'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'name': value['name'],
        'address': value['address'],
        'administrator': UserDtoToJSON(value['administrator']),
        'residents': value['residents'] == null ? undefined : ((value['residents'] as Array<any>).map(UserDtoToJSON)),
    };
}

